#debug go application via gdb
#

set build_components {
core init timer lib/ld
drivers/uart app/gdb_monitor
noux-pkg/go_app
lib/vfs/pipe
}

lappend build_components "lib/gdbserver_platform-$::env(KERNEL)"

build $build_components

create_boot_directory

install_config {
<config verbose="yes" ld_verbose="yes">
	<parent-provides>
		<service name="ROM" />
		<service name="LOG" />
		<service name="RM" />
		<service name="CPU" />
		<service name="PD" />
		<service name="IRQ" />
		<service name="IO_MEM" />
		<service name="IO_PORT" />
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<default caps="200" />
	<start name="timer">
		<resource name="RAM" quantum="2M"/>
		<provides> <service name="Timer"/> </provides>
	</start>
	<start name="pc_uart_drv">
		<resource name="RAM" quantum="2M" />
		<provides>
			<service name="Uart"/>
			<service name="Terminal"/>
		</provides>
		<config>
			<policy label_prefix="gdb_monitor" uart="1" />
		</config>
	</start>
	<start name="gdb_monitor" caps="2800">
		<resource name="RAM" quantum="50M" />
		<provides> <service name="test-go" /> </provides>
		<config verbose="yes" ld_verbose="yes">
			<target name="test-go" caps="800">
				<config verbose="yes" ld_verbose="yes">
					<vfs> <dir name="dev"> <log /> </dir> </vfs>
					<libc stdout="/dev/log" stderr="/dev/log" />
				</config>
			</target>
			<preserve name="RAM" quantum="20M" />
			<vfs>
				<dir name="dev"> <log/> <terminal/> </dir>
				<dir name="pipe"> <pipe/> </dir>
			</vfs>
			<libc stdout="/dev/log" stderr="/dev/log" pipe="/pipe"/>
		</config>
	</start>
</config>
}

# evaluated by the run tool
proc binary_name_gdbserver_platform_lib_so { } {
return "gdbserver_platform-$::env(KERNEL).lib.so"
}


build_boot_image {
core init timer
ld.lib.so libc.lib.so vfs.lib.so libm.lib.so
pc_uart_drv posix.lib.so stdcxx.lib.so vfs_pipe.lib.so
posix.lib.so stdcxx.lib.so vfs_pipe.lib.so
gdb_monitor gdbserver_platform.lib.so
vfs.lib.so test-go
}

