#debug go application via gdb
#

set build_components {
core init timer lib/ld
drivers/uart
app/gdb_monitor
noux-pkg/go_app
}

lappend build_components "lib/gdbserver_platform-$::env(KERNEL)"

build $build_components

create_boot_directory

install_config {
<config verbose="yes" ld_verbose="yes">
	<parent-provides>
		<service name="ROM" />
		<service name="LOG" />
		<service name="RM" />
		<service name="CPU" />
		<service name="PD" />
		<service name="IRQ" />
		<service name="IO_MEM" />
		<service name="IO_PORT" />
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<default caps="200" />
	<start name="timer">
		<resource name="RAM" quantum="2M"/>
		<provides> <service name="Timer"/> </provides>
	</start>
	<start name="pc_uart_drv">
		<resource name="RAM" quantum="2M" />
		<provides>
			<service name="Uart"/>
			<service name="Terminal"/>
		</provides>
		<config>
			<policy label_prefix="gdb_monitor" uart="1" />
		</config>
	</start>
	<start name="gdb_monitor" caps="2500">
		<resource name="RAM" quantum="2500M" />
		<provides> <service name="test-go" /> </provides>
		<config verbose="yes" ld_verbose="yes">
			<target name="test-go" caps="500">
				<config>
					<vfs> <dir name="dev"> <log /> </dir> </vfs>
					<libc stdout="/dev/log" stderr="/dev/log" />
				</config>
			</target>
			<preserve name="RAM" quantum="1200M" />
			<vfs> <dir name="dev"> <log /> <terminal /> </dir> </vfs>
			<libc stdout="/dev/log" stderr="/dev/log" />
		</config>
	</start>
</config>
}

# evaluated by the run tool
proc binary_name_gdbserver_platform_lib_so { } {
return "gdbserver_platform-$::env(KERNEL).lib.so"
}


build_boot_image {
core init timer ld.lib.so libc.lib.so libm.lib.so
libc_pipe.lib.so posix.lib.so stdcxx.lib.so
pc_uart_drv gdb_monitor gdbserver_platform.lib.so
vfs.lib.so test-go
}

append qemu_args " -nographic "
#
# Execute test case
#
#
set local_port 5555

# qemu config
append qemu_args "  -nographic "

# connect comport 0 to stdio
append qemu_args " -serial mon:stdio "

# connect comport 1 with TCP port $local_port
append qemu_args " -serial chardev:uart "
append qemu_args " -chardev socket,id=uart,port=$local_port,host=localhost,server,nowait,ipv4 "

run_genode_until {.*\[init -> gdb_monitor\].*} 30
set genode_id [output_spawn_id]
puts "GDB monitor is up, starting GDB"

source ${genode_dir}/repos/ports/run/gdb_monitor.inc

# GDB loads symbols from 'debug/ld.lib.so'
if { [have_spec nova] } {
exec ln -sf ld-nova.lib.so debug/ld.lib.so
}

set gdb_target_binary "test-gdb_monitor"

# sequence of GDB commands to execute at startup
set gdb_cmds ""
append gdb_cmds {-ex "target remote localhost:$local_port" }
append gdb_cmds [gdb_initial_breakpoint_cmds $gdb_target_binary]

# run GDB
eval spawn [gdb] debug/ld.lib.so -n $gdb_cmds
set gdb_id [list $spawn_id $genode_id]

puts ""
puts "----- test-go started -----"
puts ""

run_genode_until "--- parent done ---.*\n" 20
run_genode_until "child.*exited.*\n" 5 [output_spawn_id]
